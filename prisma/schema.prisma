generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Billboard {
  Id        String   @id(map: "PK_Billboard") @db.Uuid
  StoreId   String   @db.Uuid
  Label     String   @db.VarChar(255)
  ImageUrl  String
  CreatedAt DateTime @db.Timestamptz(6)
  UpdatedAt DateTime @db.Timestamptz(6)
  Stores    Stores   @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Billboard_Stores_StoreId")

  @@index([StoreId], map: "IX_Billboard_StoreId")
}

model Products {
  ProductID   Int      @id(map: "PK_Products") @default(autoincrement())
  StoreID     Int
  ProductName String
  Description String
  Price       Decimal  @db.Decimal
  Stock       Int
  CreatedDate DateTime @db.Timestamptz(6)
  StoreId     String?  @db.Uuid
  Stores      Stores?  @relation(fields: [StoreId], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Products_Stores_StoreId")

  @@index([StoreId], map: "IX_Products_StoreId")
}

model Stores {
  Id          String      @id(map: "PK_Stores") @db.Uuid
  Name        String      @db.VarChar(100)
  Description String      @db.VarChar(500)
  UserId      String
  CreatedAt   DateTime    @db.Timestamptz(6)
  UpdatedAt   DateTime    @db.Timestamptz(6)
  Billboard   Billboard[]
  Products    Products[]
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  phone                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(SELLER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}
