generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Products {
  Description String      @db.VarChar(500)
  Price       Decimal     @db.Decimal
  Stock       Int
  UpdatedAt   DateTime    @db.Timestamptz(6)
  StoreId     String      @default(dbgenerated("'00000000-0000-0000-0000-000000000000'::uuid")) @db.Uuid
  SizeId      String      @default(dbgenerated("'00000000-0000-0000-0000-000000000000'::uuid")) @db.Uuid
  ColorId     String      @default(dbgenerated("'00000000-0000-0000-0000-000000000000'::uuid")) @db.Uuid
  Id          String      @id(map: "PK_Products") @db.Uuid
  CategoryId  String      @default(dbgenerated("'00000000-0000-0000-0000-000000000000'::uuid")) @db.Uuid
  CreatedAt   DateTime    @default(dbgenerated("'-infinity'::timestamp with time zone")) @db.Timestamptz(6)
  IsArchived  Boolean     @default(false)
  IsFeatured  Boolean     @default(false)
  Name        String      @default("") @db.VarChar(100)
  Image       Image[]
  OrderItem   OrderItem[]
  Categories  Categories  @relation(fields: [CategoryId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Products_Categories_CategoryId")
  Colors      Colors      @relation(fields: [ColorId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Products_Colors_ColorId")
  Sizes       Sizes       @relation(fields: [SizeId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Products_Sizes_SizeId")
  Stores      Stores      @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Products_Stores_StoreId")

  @@index([StoreId], map: "IX_Products_StoreId")
  @@index([SizeId], map: "IX_Products_SizeId")
  @@index([ColorId], map: "IX_Products_ColorId")
  @@index([CategoryId], map: "IX_Products_CategoryId")
}

model Stores {
  Id          String       @id(map: "PK_Stores") @db.Uuid
  Name        String       @db.VarChar(100)
  Description String       @db.VarChar(500)
  UserId      String
  CreatedAt   DateTime     @db.Timestamptz(6)
  UpdatedAt   DateTime     @db.Timestamptz(6)
  Billboards  Billboards[]
  Categories  Categories[]
  Colors      Colors[]
  Order       Order[]
  Products    Products[]
  Sizes       Sizes[]
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  phone                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(SELLER)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billboards {
  Id         String       @id(map: "PK_Billboards") @db.Uuid
  StoreId    String       @db.Uuid
  Label      String       @db.VarChar(255)
  ImageUrl   String
  CreatedAt  DateTime     @db.Timestamptz(6)
  UpdatedAt  DateTime     @db.Timestamptz(6)
  Stores     Stores       @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Billboards_Stores_StoreId")
  Categories Categories[]

  @@index([StoreId], map: "IX_Billboards_StoreId")
}

model Categories {
  Id          String     @id(map: "PK_Categories") @db.Uuid
  StoreId     String     @db.Uuid
  BillBoardId String     @db.Uuid
  Name        String     @db.VarChar(255)
  CreatedAt   DateTime   @db.Timestamptz(6)
  UpdatedAt   DateTime   @db.Timestamptz(6)
  Billboards  Billboards @relation(fields: [BillBoardId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Categories_Billboards_BillBoardId")
  Stores      Stores     @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Categories_Stores_StoreId")
  Products    Products[]

  @@index([BillBoardId], map: "IX_Categories_BillBoardId")
  @@index([StoreId], map: "IX_Categories_StoreId")
}

model Sizes {
  Id        String     @id(map: "PK_Sizes") @db.Uuid
  StoreId   String     @db.Uuid
  Name      String     @db.VarChar(255)
  Value     String
  CreatedAt DateTime   @db.Timestamptz(6)
  UpdatedAt DateTime   @db.Timestamptz(6)
  Products  Products[]
  Stores    Stores     @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Sizes_Stores_StoreId")

  @@index([StoreId], map: "IX_Sizes_StoreId")
}

model Colors {
  Id        String     @id(map: "PK_Colors") @db.Uuid
  StoreId   String     @db.Uuid
  Name      String     @db.VarChar(255)
  Value     String
  CreatedAt DateTime   @db.Timestamptz(6)
  UpdatedAt DateTime   @db.Timestamptz(6)
  Stores    Stores     @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Colors_Stores_StoreId")
  Products  Products[]

  @@index([StoreId], map: "IX_Colors_StoreId")
}

model Image {
  Id        String   @id(map: "PK_Image") @db.Uuid
  ProductId String   @db.Uuid
  Url       String   @db.VarChar(255)
  CreatedAt DateTime @db.Timestamptz(6)
  UpdatedAt DateTime @db.Timestamptz(6)
  Products  Products @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Image_Products_ProductId")

  @@index([ProductId], map: "IX_Image_ProductId")
}

model Order {
  Id        String      @id(map: "PK_Order") @db.Uuid
  StoreId   String      @db.Uuid
  IsPaid    Boolean
  Phone     String      @db.VarChar(255)
  Address   String
  CreatedAt DateTime    @db.Timestamptz(6)
  UpdatedAt DateTime    @db.Timestamptz(6)
  Stores    Stores      @relation(fields: [StoreId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Order_Stores_StoreId")
  OrderItem OrderItem[]

  @@index([StoreId], map: "IX_Order_StoreId")
}

model OrderItem {
  Id        String   @id(map: "PK_OrderItem") @db.Uuid
  OrderId   String   @db.Uuid
  ProductId String   @db.Uuid
  Order     Order    @relation(fields: [OrderId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_OrderItem_Order_OrderId")
  Products  Products @relation(fields: [ProductId], references: [Id], onDelete: Cascade, onUpdate: NoAction, map: "FK_OrderItem_Products_ProductId")

  @@index([OrderId], map: "IX_OrderItem_OrderId")
  @@index([ProductId], map: "IX_OrderItem_ProductId")
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}
